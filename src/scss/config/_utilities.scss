@use 'sass:color';
@use 'sass:list';
@use 'sass:string';

$base-font-size: 10px !default;
$reference: 1440px !default;
$shadows: (
  rgba($color-black, 12%) 0 rem(1px) rem(2px) rem(0px),
  rgba($color-black, 8%) 0 rem(3px) rem(6px) rem(-3px),
  rgba($color-black, 8%) 0 rem(3px) rem(12px) rem(-6px)
) !default;

/// Returns the value in rem for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.

@function rem($value) {
  $unit: unit($value);

  @if $value == 0 {
    @return 0;
  } @else if $unit == 'rem' {
    @return $value;
  } @else if $unit == 'px' {
    @return $value / $base-font-size * 1rem;
  } @else if $unit == 'em' {
    @return $unit / 1em * 1rem;
  } @else {
    @error 'Value must be in px, em, or rem.';
  }
}

/// Returns the value in px for a given value.
/// @param {Number} $value - The value to be converted.
/// @return {Number} The converted value in px.
@function strip-unit($value) {
  $unit: unit($value);

  @if $value == 0 {
    @return 0;
  } @else if $unit == 'rem' {
    @return ($value / 1rem);
  } @else if $unit == 'px' {
    @return ($value / 1px);
  } @else if $unit == 'em' {
    @return ($value / 1em);
  } @else {
    @error 'Value must be in px, em, or rem.';
  }
}

/// Returns the value in vw for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.

@function vw($value, $reference: 1440px) {
  $unit: unit($value);

  @if $value == 0 {
    @return 0;
  } @else if $unit == 'rem' {
    $value: strip-unit($value);
    $base: strip-unit($base-font-size);
    $ref: strip-unit($reference);

    @return (($value * $base) / $ref) * 100vmax;
  } @else if $unit == 'px' {
    @return ($value / $reference) * 100vmax;
  } @else if $unit == 'em' {
    @return ($value / 1em) * 1vmax;
  } @else {
    @error 'Value must be in px, em, or rem.';
  }
}

/// Returns the value in em for a given value.
/// @param {Number} $value - The value to be converted.
/// @return {Number} The converted value in em.

@function em($value) {
  $unit: unit($value);

  @if $value == 0 {
    @return 0;
  } @else if $unit == 'rem' {
    @return ($value / 1rem) * 1em;
  } @else if $unit == 'px' {
    @return ($value / 1px) * 1em;
  } @else if $unit == 'em' {
    @return ($value / 1em) * 1em;
  } @else if $unit == '' {
    @return $value * 1em;
  } @else {
    @error 'Value must be in px, em, or rem.';
  }
}

///
/// Calculate z-index based on list from top > bottom
///
$global-zindex: (modal, navigation, body, background) !default;

@function z-index($element, $list: $global-zindex) {
  $list: reverse($list);
  $z-index: index($list, $element) * 10;

  @if $z-index {
    @return $z-index;
  }

  @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}';

  @return null;
}

//
// Helper function to reverse a sass list
//
@function reverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list) * -1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}

@mixin effect-exclusion($color: #121212) {
  color: invert($color);
  mix-blend-mode: difference;
}
//
// Helper function to convert hex to comma separated rgb values to use in css custom properties
//
@function hexToRGB($hex) {
  @return color.red($hex), color.green($hex), color.blue($hex);
}
//
// Helper function to create a box-shadow based on the elevation level
//
@function shadow($depth: 1) {
  $shadow: ();

  @for $i from 1 through $depth {
    $shadow: list.append($shadow, list.nth($shadows, $i), 'comma');
  }

  @return $shadow;
}
