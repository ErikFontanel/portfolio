@use "sass:meta";
@use "colors";

@use 'sass:map';
@use 'sass:list';
@use 'variables' as *;
@use 'utilities' as *;
/// Returns the font size for a given text style and variant.
///
/// @param {String} $style - The font style.
/// @param {String} $variant [base] - The variant on the font-size.
/// @return {Number} The font-size for the text-style.
@function font-size($variant) {
  $fetched-font-size: map.get($font-sizes, $variant);
  $list: map.keys($font-sizes);
  $length: list.length($list);
  $index: list.index($list, $variant);

  $smaller: if(
    $index < $length,
    list.nth($list, $index + 1),
    list.nth($list, $index)
  );

  $bigger: if(
    $index > $length or $index == 1,
    list.nth($list, $index),
    list.nth($list, $index - 1)
  );

  @if meta.type-of($fetched-font-size) {
    @return clamp(
      #{map.get($font-sizes, $smaller)},
      #{vw($fetched-font-size)},
      #{map.get($font-sizes, $bigger)}
    );
  } @else {
    @error 'Font size `#{$variant}` not found.';
  }
}

/// Returns the line height for a given text style and variant.
///
/// @param {String} $style - The font style.
/// @param {String} $variant [base] - The variant on the font-size.
/// @return {Number} The font-size for the text-style.
@function line-height($variant) {
  $fetched-line-height: map.get($line-heights, $variant);

  @if meta.type-of($fetched-line-height) {
    @return $fetched-line-height;
  } @else {
    @error 'Line height `#{$variant}` not found.';
  }
}

@mixin text-style-caption {
  color: var(--color-text-sub);
  font-family: $font-stack-base;
  font-weight: 400;
  font-style: normal;
  font-size: font-size(extra-small);
  line-height: line-height(caption);
  font-variation-settings: 'wght' var(--inter-font-weight),
    'slnt' var(--inter-font-slant);
  letter-spacing: -0.04em;
}

@mixin text-style-body {
  font-family: $font-stack-base;
  font-weight: 400;
  font-style: normal;
  font-size: font-size(medium);
  line-height: clamp(
    #{line-height(extra-small)},
    #{line-height(small)},
    #{line-height(medium)}
  );

  letter-spacing: -0.04em;
}

@mixin text-style-small {
  font-family: $font-stack-base;
  font-weight: 400;
  font-style: normal;
  font-size: font-size(small);
  line-height: line-height(small);
  font-variation-settings: 'wght' var(--inter-font-weight),
    'slnt' var(--inter-font-slant);
  letter-spacing: -0.04em;
}

@mixin text-style-medium {
  font-family: $font-stack-base;
  font-weight: 400;
  font-style: normal;
  font-size: font-size(medium);
  line-height: line-height(medium);
  font-variation-settings: 'wght' var(--inter-font-weight),
    'slnt' var(--inter-font-slant);
  letter-spacing: -0.04em;
}

@mixin text-style-large {
  font-family: $font-stack-base;
  font-size: font-size(large);
  line-height: line-height(large);
  font-variation-settings: 'wght' var(--inter-font-weight),
    'slnt' var(--inter-font-slant);
  letter-spacing: -0.04em;
}

@mixin text-style-extra-large {
  font-family: $font-stack-base;
  font-size: font-size(extra-large);
  line-height: line-height(extra-large);
  font-variation-settings: 'wght' var(--inter-font-weight),
    'slnt' var(--inter-font-slant);
  letter-spacing: -0.04em;
}

@mixin text-style-extra-extra-large {
  font-family: $font-stack-base;
  font-size: font-size(extra-extra-large);
  line-height: line-height(extra-extra-large);
  font-variation-settings: 'wght' var(--inter-font-weight),
    'slnt' var(--inter-font-slant);
  letter-spacing: -0.04em;
}

@mixin text-style-link {
  color: inherit;
  text-decoration: none;
  border-bottom: rem(1px) solid colors.$color-sky;

  &:visited {
    color: inherit;
  }

  &:hover {
    color: $color-primary;
    border-color: currentColor;
  }

  &:active {
    color: $color-primary;
    border-color: currentColor;
  }

  &:focus {
    color: $color-primary;
    border-color: currentColor;
  }
}
